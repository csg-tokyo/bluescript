--- Variable declaration (let, integer)
### ts
let i:integer;

### c
int32_t i;

--- Variable declaration (let, float)
### ts
let i:float;

### c
float i;

--- Variable declaration (let, boolean)
### ts
let b:boolean;

### c
bool b;

--- Variable declaration (let, string)
### ts
let s:string;

### c
value_t s;

--- Variable declaration (let, integer) with init
### ts
let i:integer = 3 + 1;

### c
int32_t i = 3 + 1;

--- Variable declaration (let, float) with init
### ts
let i:float = 3 + 1;

### c
float i = 3 + 1;

--- Variable declaration (let, bool) with init
### ts
let b:boolean = true;

### c
bool b = true;

--- Variable declaration (let, string) with init
### ts
let s:string = "Hello world!";

### c
value_t s = gc_new_string("Hello world!");
gc_array_set(gc_global_root_set_array, int_to_value(1), s);

--- Variable declaration (const, integer) with init
### ts
const i:integer = 2 * 3;

### c
const int32_t i = 2 * 3;

--- Variable declaration (const, float) with init
### ts
const i:float = 1.1;

### c
const float i = 1.1;

--- Variable declaration (const, bool) with init
### ts
const b:boolean = false;

### c
const bool b = false;

--- Variable declaration (const, string) with init
### ts
const s:string = "Hello world!";

### c
const value_t s = gc_new_string("Hello world!");
gc_array_set(gc_global_root_set_array, int_to_value(1), s);

--- Variable declaration (const, string) with init, 2 string declaration
### ts
const s1:string = "Hello world!";
const s2:string = "Foo!";

### c
const value_t s1 = gc_new_string("Hello world!");
gc_array_set(gc_global_root_set_array, int_to_value(1), s1);
const value_t s2 = gc_new_string("Foo!");
gc_array_set(gc_global_root_set_array, int_to_value(2), s2);

--- Variable declaration multi
### ts
let i:integer = 1, f:float = 2.4;

### c
int32_t i = 1;
float f = 2.4;

--- Function declaration with no param, void, no return statement
### ts
function func1():void {
}

### c
void func1() {
};

--- Function declaration with integer return
### ts
function func1():integer {
    return 1 + 1;
}

### c
int32_t func1() {
return 1 + 1;
};

--- Function declaration with multi return
### ts
function func1():integer {
    if (10 > 1) {
        return 2;
    } else {
        return 3;
    }
}

### c
int32_t func1() {
if (10 > 1) {
return 2;
} else {
return 3;
};
};

--- Function declaration with 1 param (integer), integer return
### ts
function func1(i: integer):integer {
    return 1 + 1;
}

### c
int32_t func1(int32_t i) {
return 1 + 1;
};

--- Function declaration with 3 param (integer), integer return
### ts
function func1(a: integer, b:integer, c:integer):integer {
    return 1 + 1;
}

### c
int32_t func1(int32_t a, int32_t b, int32_t c) {
return 1 + 1;
};

--- Function declaration with 2 param (integer, string), integer return
### ts
function func1(i: integer, s:string):integer {
    return 1 + 1;
}

### c
int32_t func1(int32_t i, value_t s) {
ROOT_SET(root_set, 1);
root_set.values[0] = s;
DELETE_ROOT_SET(root_set);
return 1 + 1;
DELETE_ROOT_SET(root_set);
};

--- Function declaration with 2 param (string, string), integer return
### ts
function func1(s1: string, s2:string):integer {
    return 1 + 1;
}

### c
int32_t func1(value_t s1, value_t s2) {
ROOT_SET(root_set, 2);
root_set.values[0] = s1;
root_set.values[1] = s2;
DELETE_ROOT_SET(root_set);
return 1 + 1;
DELETE_ROOT_SET(root_set);
};

--- Function declaration with 2 param (integer, string), no return
### ts
function func1(i: integer, s:string):integer {
}

### c
int32_t func1(int32_t i, value_t s) {
ROOT_SET(root_set, 1);
root_set.values[0] = s;
DELETE_ROOT_SET(root_set);
};

--- Function declaration with 2 param (integer, string), integer dec
### ts
function func1(i: integer, s:string):integer {
    let n:integer = 3;
    return n;
}

### c
int32_t func1(int32_t i, value_t s) {
ROOT_SET(root_set, 1);
root_set.values[0] = s;
int32_t n = 3;
DELETE_ROOT_SET(root_set);
return n;
DELETE_ROOT_SET(root_set);
};

--- Function declaration with 2 param (integer, string), string dec
### ts
function func1(i: integer, s:string):integer {
    let s1: string = "Hello world!";
    return 1 + 1;
}

### c
int32_t func1(int32_t i, value_t s) {
ROOT_SET(root_set, 2);
root_set.values[0] = s;
value_t s1 = gc_new_string("Hello world!");
root_set.values[1] = s1;
DELETE_ROOT_SET(root_set);
return 1 + 1;
DELETE_ROOT_SET(root_set);
};

--- Function declaration with 2 param (integer, string), integer dec, integer assignment
### ts
function func1(i: integer, s:string):integer {
    let n:integer = 3;
    n = 4;
    return n;
}

### c
int32_t func1(int32_t i, value_t s) {
ROOT_SET(root_set, 1);
root_set.values[0] = s;
int32_t n = 3;
n = 4;
DELETE_ROOT_SET(root_set);
return n;
DELETE_ROOT_SET(root_set);
};

--- Function declaration with 2 param (integer, string), string dec, string assignment
### ts
function func1(i: integer, s:string):integer {
    let s1: string = "Hello world!";
    s1 = "Foo!";
    return 1 + 1;
}

### c
int32_t func1(int32_t i, value_t s) {
ROOT_SET(root_set, 2);
root_set.values[0] = s;
value_t s1 = gc_new_string("Hello world!");
root_set.values[1] = s1;
s1 = gc_new_string("Foo!");
root_set.values[1] = s1;
DELETE_ROOT_SET(root_set);
return 1 + 1;
DELETE_ROOT_SET(root_set);
};

--- Function declaration with no param, outer integer assignment
### ts
function func1():integer {
    ii = 3;
    return 3;
}

### c
int32_t func1() {
ii = 3;
return 3;
};

--- Function declaration with no param, outer string assignment
### ts
function func1():integer {
    ss = "Foo!";
}

### c
int32_t func1() {
ss = gc_new_string("Foo!");
gc_array_set(gc_global_root_set_array, int_to_value(0), ss);
};
