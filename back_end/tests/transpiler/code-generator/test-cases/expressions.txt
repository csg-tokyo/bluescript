--- Binary expression with 2 terms
### ts
1 + 1;

### c
1 + 1;

--- Binary expression with 3 terms
### ts
1 + 2 + 3;

### c
1 + 2 + 3;

--- Binary expression with parenthesized
### ts
1 * ( 2 + 3 );

### c
1 * ( 2 + 3 );

--- Binary expression with float
### ts
2.3 * 3.4;

### c
2.3 * 3.4;

--- Binary expression with float and integer
### ts
2.3 * 1;

### c
2.3 * 1;

--- Binary expression with variable(integer)
### ts
i + 1;

### c
i + 1;

--- Binary expression with variable(array)
### ts
arr[2] + 1;

### c
value_to_int(gc_array_get(arr, int_to_value(2))) + 1;

--- Assignment expression (=)
### ts
i = 1;

### c
i = 1;

--- Assignment expression (+=)
### ts
i += 1;

### c
i += 1;

--- Assignment expression (-=)
### ts
i -= 1;

### c
i -= 1;

--- Assignment expression (*=)
### ts
i *= 1;

### c
i *= 1;

--- Assignment expression (/=)
### ts
i /= 1;

### c
i /= 1;

--- Assignment expression (%=)
### ts
i %= 1;

### c
i %= 1;

--- Assignment expression (|=)
### ts
i |= 1;

### c
i |= 1;

--- Assignment expression (^=)
### ts
i ^= 1;

### c
i ^= 1;

--- Assignment expression (&=)
### ts
i &= 1;

### c
i &= 1;

--- Assignment expression (<<=)
### ts
i <<= 1;

### c
i <<= 1;

--- Assignment expression (>>=)
### ts
i >>= 1;

### c
i >>= 1;

--- Assignment expression with string
### ts
s = "Foo!";

### c
s = gc_new_string("Foo!");
gc_array_set(gc_global_root_set_array, int_to_value(0), s);

--- Assignment expression with array
### ts
arr[2] = 3;

### c
gc_array_set(arr, int_to_value(2), int_to_value(3));

--- Assignment expression (+=) with array
### ts
arr[2] += 3;

### c
gc_array_set(arr, int_to_value(2), int_to_value(value_to_int(gc_array_get(arr, int_to_value(2))) + 3));

--- Update expression with addition prefix
### ts
++i;

### c
++i;

--- Update expression with addition suffix
### ts
i++;

### c
i++;

--- Update expression with subtraction prefix
### ts
--i;

### c
--i;

--- Update expression with subtraction suffix
### ts
i--;

### c
i--;

--- Update expression(array) with addition prefix;
### ts
++arr[0];

### c
value_to_int(gc_array_set(arr, int_to_value(0), int_to_value(value_to_int(gc_array_get(arr, int_to_value(0))) + 1)));

--- Update expression(array) with addition prefix, float;
### ts
++arr_float[0];

### c
value_to_float(gc_array_set(arr_float, int_to_value(0), float_to_value(value_to_float(gc_array_get(arr_float, int_to_value(0))) + 1)));

--- Update expression(array) with addition suffix;
### ts
arr[0]++;

### c
value_to_int(gc_array_set(arr, int_to_value(0), int_to_value(value_to_int(gc_array_get(arr, int_to_value(0))) + 1))) - 1;

--- Unary expression (+)
### ts
+i;

### c
+i;

--- Unary expression (-)
### ts
-i;

### c
-i;

--- Unary expression (!)
### ts
!i;

### c
!i;

--- Unary expression (~)
### ts
~i;

### c
~i;

--- Logical expression (&&)
### ts
b && true;

### c
b && true;

--- Logical expression with (||)
### ts
b || false;

### c
b || false;

--- Logical expression with parenthesized
### ts
b && (b || true);

### c
b && ( b || true );

--- Conditional expression
### ts
b ? 10 : 100;

### c
b ? 10 : 100;

--- Conditional expression with parenthesized
### ts
(i === 1 ? (i === 2 ? 3 : 5) : 0);

### c
( i === 1 ? ( i === 2 ? 3 : 5 ) : 0 );

--- Call expression with no argument
### ts
greeting();

### c
greeting();

--- Call expression with one argument
### ts
console_log_number(2);

### c
console_log_number(2);

--- Call expression with multi argument
### ts
add(1, 2);

### c
add(1, 2);
